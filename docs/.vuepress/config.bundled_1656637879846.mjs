// docs/.vuepress/config.ts
import { defineConfig4CustomTheme } from "vuepress/config";

// docs/.vuepress/config/htmlModules.ts
var htmlModule = {};
var htmlModules_default = htmlModule;

// docs/.vuepress/config/baiduCode.ts
var baiduCode_default = "7063d9cab573593f52f061c7858ce6bd";

// docs/.vuepress/config/plugin.config.ts
import dayjs from "dayjs";

// docs/.vuepress/config/site.config.ts
var siteName = "\u6C27\u6C14\u7A7A\u95F4";
var siteDesc = "\u4E09\u4E94\u77E5\u5DF1\u76F8\u9022\uFF0C\u51E0\u8BB8\u58A8\u9999\u5171\u4EAB\u3002";
var useCustomDomainName = true;
var customDomainName = "ox.jonsam.site";
var siteKeywords = "\u9605\u8BFB,\u4E66\u7C4D,\u4E66\u7C4D\u4E0B\u8F7D,\u4E66\u7C4D\u63A8\u8350";
var siteThemeColor = "#DC5B68";
var siteIconFont = "//at.alicdn.com/t/font_3314748_9xij1pv3h4i.css";
var siteRepo = "jonsam-ng/oxygen-space";
var personalLink = "https://www.jonsam.site";
var siteAuthor = {
  name: "jonsam",
  link: "https://github.com/jonsam-ng"
};
var siteBlogger = {
  avatar: "https://www.jonsam.site/wp-content/uploads/2019/10/c1fbc401c64937aaec6cb53359e7c57eabd8e477-e1570649725791.gif",
  name: "Jonsam NG",
  slogan: "\u8BA9\u6709\u610F\u4E49\u7684\u4E8B\u53D8\u5F97\u6709\u610F\u601D\uFF0C\u8BA9\u6709\u610F\u601D\u7684\u4E8B\u53D8\u5F97\u6709\u610F\u4E49"
};
var siteFooter = {
  createYear: 2022,
  copyrightInfo: `${siteName} | Template by <a href="https://jonsam-ng.github.io/fancy-note-starter/">Fancy Note Starter</a> | Made by <a href=${personalLink} target="_blank">${siteAuthor.name}</a> with \u2764`
};
var siteBase = useCustomDomainName ? "/" : `/${siteRepo}/`;
var siteHost = useCustomDomainName ? `https://${customDomainName}` : siteAuthor.link;
var siteUrl = siteHost + siteBase;

// docs/.vuepress/config/plugin.config.ts
var plugin_config_default = [
  "vuepress-plugin-baidu-autopush",
  [
    "vuepress-plugin-baidu-tongji",
    { hm: baiduCode_default }
  ],
  "fulltext-search",
  [
    "one-click-copy",
    {
      copySelector: [
        'div[class*="language-"] pre',
        'div[class*="aside-code"] aside'
      ],
      copyMessage: "\u590D\u5236\u6210\u529F",
      duration: 1e3,
      showInMobile: false
    }
  ],
  [
    "demo-block",
    {
      settings: {
        jsfiddle: false,
        codepen: true,
        horizontal: false
      }
    }
  ],
  [
    "vuepress-plugin-zooming",
    {
      selector: ".theme-vdoing-content img:not(.no-zoom)",
      options: {
        bgColor: "rgba(0,0,0,0.6)"
      }
    }
  ],
  [
    "vuepress-plugin-comment",
    {
      choosen: "gitalk",
      options: {
        clientID: "9f6676a82c6134301680",
        clientSecret: "4bbf7178807c1a1d2c7b91080e0bd25bcb72a089",
        repo: "fancy-machine-learnning",
        owner: "jonsam-ng",
        admin: ["jonsam-ng"],
        pagerDirection: "last",
        id: "<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",
        title: "\u300C\u8BC4\u8BBA\u300D<%- frontmatter.title %>",
        labels: ["Gitalk", "Comment"],
        body: "\u9875\u9762\uFF1A<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"
      }
    }
  ],
  [
    "@vuepress/last-updated",
    {
      transformer: (timestamp, lang) => {
        return dayjs(timestamp).format("YYYY/MM/DD, HH:mm:ss");
      }
    }
  ],
  ["@renovamen/vuepress-plugin-katex", { strict: false }],
  [
    "@vuepress/pwa",
    {
      serviceWorker: true,
      updatePopup: true
    }
  ],
  [
    "@xzhi/add-copyright",
    {
      authorName: siteAuthor.name,
      minLength: 100,
      noCopy: true
    }
  ],
  [
    "sitemap",
    {
      hostname: siteHost
    }
  ],
  ["seo", {}],
  "img-lazy",
  [
    "smplayer",
    {}
  ],
  {
    name: "custom-plugins",
    globalUIComponents: ["LastReadingPopup", "GlobalTip", "BlockToggle"]
  }
];

// docs/.vuepress/config/nav.config.ts
var nav_config_default = [
  {
    text: "\u4E66\u67B6",
    link: "/cate/"
  },
  {
    text: "\u7D22\u5F15",
    link: "/archives/",
    items: [
      { text: "\u5206\u7C7B", link: "/categories/" },
      { text: "\u6807\u7B7E", link: "/tags/" },
      { text: "\u5F52\u6863", link: "/archives/" }
    ]
  },
  {
    text: "\u66F4\u591A",
    items: [
      { text: "\u5173\u4E8E", link: "/about/" },
      { text: "\u5E7B\u706F\u7247", link: `/slides/#/1` }
    ]
  },
  { text: "\u535A\u5BA2", link: "https://www.jonsam.site" }
];

// docs/.vuepress/config/social.config.ts
var social_config_default = {
  icons: [
    {
      iconClass: "icon-youjian",
      title: "\u53D1\u90AE\u4EF6",
      link: "mailto:jonsam.ng@foxmail.com"
    },
    {
      iconClass: "icon-github",
      title: "GitHub",
      link: "https://github.com/jonsam-ng"
    },
    {
      iconClass: "icon-mao",
      title: "\u535A\u5BA2",
      link: "https://www.jonsam.site"
    },
    {
      iconClass: "icon-shuben",
      title: "\u6587\u6863",
      link: "https://docs.jonsam.site"
    },
    {
      iconClass: "icon-code",
      title: "\u6E90\u7801",
      link: "https://source.jonsam.site"
    }
  ]
};

// docs/.vuepress/config/head.config.ts
var head_config_default = [
  ["link", { rel: "icon", href: `/img/favicon.ico` }],
  ["meta", { name: "referrer", content: "no-referrer-when-downgrade" }],
  ["meta", { name: "keywords", content: siteKeywords }],
  [
    "link",
    {
      rel: "stylesheet",
      href: siteIconFont
    }
  ],
  ["link", { rel: "icon", href: "/img/favicon.ico", type: "image/x-icon" }],
  ["link", { rel: "manifest", href: "/img/manifest.json" }],
  ["meta", { name: "theme-color", content: siteThemeColor }],
  ["meta", { name: "apple-mobile-web-app-capable", content: "yes" }],
  ["meta", { name: "apple-mobile-web-app-status-bar-style", content: "black" }],
  [
    "link",
    { rel: "apple-touch-icon", href: "/img/android-chrome-192x192.png" }
  ],
  [
    "link",
    {
      rel: "mask-icon",
      href: "/icons/safari-pinned-tab.svg",
      color: "#3eaf7c"
    }
  ],
  [
    "meta",
    {
      name: "msapplication-TileImage",
      content: "/icons/msapplication-icon-144x144.png"
    }
  ],
  ["meta", { name: "msapplication-TileColor", content: "#000000" }]
];

// docs/.vuepress/config.ts
var config_default = defineConfig4CustomTheme({
  theme: "vdoing",
  base: siteBase,
  locales: {
    "/": {
      lang: "zh-CN",
      title: siteName,
      description: siteDesc
    }
  },
  themeConfig: {
    nav: nav_config_default,
    sidebarDepth: 1,
    logo: `/img/logo.png`,
    repo: siteRepo,
    searchMaxSuggestions: 10,
    lastUpdated: "\u4E0A\u6B21\u66F4\u65B0",
    docsDir: "docs",
    editLinks: true,
    editLinkText: "\u7F16\u8F91",
    category: true,
    tag: true,
    archive: true,
    categoryText: "\u968F\u7B14",
    titleBadge: true,
    contentBgStyle: 6,
    updateBar: {
      showToArticle: true,
      moreArticle: "/archives"
    },
    rightMenuBar: true,
    sidebarOpen: true,
    pageButton: true,
    sidebar: "structuring",
    author: siteAuthor,
    blogger: siteBlogger,
    social: social_config_default,
    footer: siteFooter,
    htmlModules: htmlModules_default
  },
  head: head_config_default,
  plugins: plugin_config_default,
  markdown: {
    lineNumbers: true,
    extractHeaders: ["h2", "h3", "h4", "h5", "h6"]
  },
  extraWatchFiles: [
    ".vuepress/config.ts",
    ".vuepress/config/htmlModules.ts",
    ".vuepress/config/site.config.ts",
    ".vuepress/config/head.config.ts",
    ".vuepress/config/nav.config.ts",
    ".vuepress/config/plugin.config.ts",
    ".vuepress/config/social.config.ts"
  ],
  configureWebpack: {
    node: {
      global: true,
      process: true
    }
  },
  extendFrontmatter: {
    titleTag: ""
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
